// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package entry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// EntryClient is the client API for Entry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntryClient interface {
	List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error)
}

type entryClient struct {
	cc grpc.ClientConnInterface
}

func NewEntryClient(cc grpc.ClientConnInterface) EntryClient {
	return &entryClient{cc}
}

func (c *entryClient) List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error) {
	out := new(ListResp)
	err := c.cc.Invoke(ctx, "/entry.v1.Entry/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntryServer is the server API for Entry service.
// All implementations must embed UnimplementedEntryServer
// for forward compatibility
type EntryServer interface {
	List(context.Context, *ListReq) (*ListResp, error)
	mustEmbedUnimplementedEntryServer()
}

// UnimplementedEntryServer must be embedded to have forward compatible implementations.
type UnimplementedEntryServer struct {
}

func (UnimplementedEntryServer) List(context.Context, *ListReq) (*ListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedEntryServer) mustEmbedUnimplementedEntryServer() {}

// UnsafeEntryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntryServer will
// result in compilation errors.
type UnsafeEntryServer interface {
	mustEmbedUnimplementedEntryServer()
}

func RegisterEntryServer(s *grpc.Server, srv EntryServer) {
	s.RegisterService(&_Entry_serviceDesc, srv)
}

func _Entry_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entry.v1.Entry/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntryServer).List(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Entry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "entry.v1.Entry",
	HandlerType: (*EntryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Entry_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entry.proto",
}
