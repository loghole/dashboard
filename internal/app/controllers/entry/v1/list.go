// Code generated by tron. You must modify it.

package entry

import (
	context "context"

	jsoniter "github.com/json-iterator/go"

	"github.com/loghole/dashboard/internal/app/domain"
	"github.com/loghole/dashboard/internal/app/usecases"
	entryV1 "github.com/loghole/dashboard/pkg/entry/v1"
)

func (i *Implementation) List(
	ctx context.Context,
	req *entryV1.ListReq,
) (resp *entryV1.ListResp, err error) {
	if err := req.Validate(); err != nil {
		return nil, err
	}

	result, err := i.listEntry.Do(ctx, entryListReqToInput(req))
	if err != nil {
		return nil, err
	}

	resp = &entryV1.ListResp{}

	resp.Data, err = jsoniter.Marshal(result)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func entryListReqToInput(req *entryV1.ListReq) *usecases.ListEntryIn {
	input := &usecases.ListEntryIn{
		Query: &domain.Query{
			Params: make([]*domain.QueryParam, 0, len(req.Params)),
			Limit:  req.Limit,
			Offset: req.Offset,
		},
	}

	for _, param := range req.Params {
		if param.Value.IsEmpty() {
			continue
		}

		input.Params = append(input.Params, &domain.QueryParam{
			Type:     param.Type,
			Key:      param.Key,
			Value:    domain.ParamValue{Item: param.Value.Item, List: param.Value.List},
			Operator: param.Operator,
		})
	}

	return input
}
